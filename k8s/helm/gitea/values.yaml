# Default values for gitea.
tlsHostname: gitea.example.com
nodeportSSH: 30999
# TODO - if only there were a way to reference these values within
#   the backup script below, without moving it to a separate
#   template. Something like {{ tpl .Values.backups.hour . }} but
#   that doesn't work. Constants are defined here and below.
# backups:
#   hour: 7
#   keepDays: 90
deployment:
  command: [/bin/bash]
  args:
  - -c
  - |
    # This script is a workaround for lack of non-privileged cron
    # under alpine/busybox - if at least one recent backup is present,
    # run a daily 7am UTC check to get rid of those over 90 days
    while true; do
      if [ $(date +%H) -eq 7 ] && \
           ! find /var/backups -mtime -7 -exec false {} + ; then
        gitea dump -f /var/backups/dump.$(date +%y-%m-%d_%H-%M).zip && \
          find /var/backups -mtime +90 -name '*.zip' -delete
        sleep 3600
      else
        sleep 60
      fi
    done &
    exec /usr/bin/dumb-init -- /usr/local/bin/docker-entrypoint.sh
  env:
    gitea__database__host: "db00:3306"
    gitea__database__name: gitea
    gitea__database__user: gitea
    gitea__mailer__from: git@example.com
    gitea__mailer__protocol: smtp
    gitea__mailer__smtp_addr: smtp
    gitea__service__disable_registration: "false"
    gitea__service__require_signin_view: "true"
    # runAsUser unsupported - leave these at default
    user_gid: 1000
    user_uid: 1000
  xenv:
  - name: gitea__database__passwd
    valueFrom:
      secretKeyRef:
        key: gitea-db-password
        name: gitea-db-password
  containerPorts:
  - containerPort: 2222
  - containerPort: 3000
  livenessProbe:
    httpGet:
      path: /api/healthz
      port: http
    initialDelaySeconds: 200
    timeoutSeconds: 5
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 10
  nodeSelector:
    service.gitea: allow
  resources:
    limits:
      memory: 1024Mi
    requests:
      cpu: 300m
      memory: 128Mi
volumeMounts:
- mountPath: /var/lib/gitea
  name: data
  subPath: data
- mountPath: /etc/gitea
  name: data
  subPath: etc
- mountPath: /var/backups
  name: backup
  subPath: gitea
volumes:
- name: backup
  hostPath: { path: /var/lib/docker/k8s-volumes/backup }
- name: data
  hostPath: { path: /var/lib/docker/k8s-volumes/share/gitea }

image:
  repository: gitea/gitea
  pullPolicy: IfNotPresent
  # tag: default

nameOverride: ""
fullnameOverride: ""

serviceAccount: {}
service:
service:
  clusterIP: None
  ports:
  - { port: 80, targetPort: 3000, name: gitea }
  - { port: 8999, targetPort: 2222, name: ssh }
  type: ClusterIP
autoscaling:
  enabled: false

authelia:
  fqdn: authtotp.example.com
  ip: 10.101.1.5
  path: /user/login
ingress:
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/enable-access-log: "false"
