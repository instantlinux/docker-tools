---
- name: k8s repo key
  get_url:
    url: "{{ k8s.apt_repo.url }}"
    dest: /etc/apt/keyrings/kubernetes.asc

- name: k8s repo
  apt_repository:
    filename: k8s
    repo: "{{ k8s.apt_repo.repo }}"

- name: Install system packages
  apt:
    name: "{{ ubuntu_packages }}"
  when: ansible_os_family == 'Debian'

- name: Load kernel modules
  modprobe:
    name: "{{ item }}"
  with_items: "{{ k8s_kernel_modules }}"

- name: Add kernel modules to /etc/modules-load.d
  copy:
    content: "{{ k8s_kernel_modules | join('\n') | string }}"
    dest: /etc/modules-load.d/network.conf

- name: Look for swap entries
  shell: grep swap /etc/fstab | awk '{ print $1; }'
  register: swapdevs

- name: Disable swap
  mount:
    fstype: swap
    path: none
    src: "{{ item }}"
    state: absent
  with_items: "{{ swapdevs.stdout_lines }}"

- name: Turn swap off
  command: swapoff --all
  changed_when: false

- name: Sysctl tuning parameters
  sysctl:
    name: "{{ item.key }}"
    value: "{{ item.value }}"
    sysctl_set: yes
  with_dict: "{{ sysctl }}"

- name: Set static hostname as FQDN
  command: hostnamectl --static set-hostname {{ inventory_hostname }}
  when: inventory_hostname != ansible_hostname

- include_tasks: cri-dockerd.yml

- name: Set up master
  include_tasks: master.yml
  when: k8s.master

- name: Join cluster
  include_tasks: join.yml
  when: not k8s.master

# TODO bug 1294
- name: Add RequiresMountsFor to kubelet.service
  replace:
    dest: /lib/systemd/system/kubelet.service
    regexp: "^\\[Unit\\]$"
    replace: >
      [Unit] 
      \n# Added by Ansible
      \nRequiresMountsFor=/var/lib/kubelet
  when: False

- name: Add systemd unit file for disabling transparent huge pages
  copy:
    dest: /etc/systemd/system/disable-thp.service
    src: disable-thp.service

- name: Start disable-thp service
  systemd:
    daemon_reload: yes
    enabled: yes
    name: disable-thp
    state: started
  when: not k8s.master

- name: Add kubelet service
  systemd:
    daemon_reload: yes
    name: "{{ k8s.service.name }}"
    state: "{{ k8s.service.state }}"
    enabled: "{{ k8s.service.enabled }}"

- name: Create local_vols shared directory
  file:
    name: "{{ item }}"
    state: directory
  with_items:
  - "{{ k8s.local_vols }}"
  - "{{ k8s.local_vols }}/share"
