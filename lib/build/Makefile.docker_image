# Standard Makefile for Docker image
#   created by richb@instantlinux.net 20-Apr-2017

BUILDX      = https://github.com/docker/buildx/releases/download/v0.4.1/buildx-v0.4.1.linux-amd64
PLATFORMS  ?= linux/amd64
PUSH       ?= --push
USER_LOGIN ?= instantlinux
VENV        = python_env
VDIR        = $(PWD)/$(VENV)

export IMAGE_NAME  = $(REGISTRY)/$(IMAGE):$(TAG)
export DOCKER_REPO = $(USER_LOGIN)/$(IMAGE)

ifneq ($(CI_COMMIT_TAG),)
  TAG_OPT   = --tag $(USER_LOGIN)$(IMAGE):$(CI_COMMIT_TAG)      
endif

# Exceptions
ifeq ($(IMAGE),data-sync)
  PLATFORMS = linux/amd64,linux/aarch64
endif
ifeq ($(IMAGE),mythtv-backend)
  PLATFORMS = linux/amd64
endif
ifeq ($(IMAGE),nagiosql)
  PLATFORMS = linux/amd64,linux/arm64,linux/arm/v7
endif
ifeq ($(IMAGE),python-builder)
  # helm package on arm/v6 isn't supported as of Aug 2021
  PLATFORMS = linux/amd64,linux/arm64,linux/arm/v7
endif
ifeq ($(IMAGE),spamassassin)
  PLATFORMS = linux/amd64,linux/arm64
endif

analysis: flake8
	  @echo "Running static analysis"

test_functional:
	@echo "Running functional verification of running image"

create_image: $(HOME)/.docker/cli-plugins/docker-buildx
	docker buildx build --tag $(REGISTRY)/$(IMAGE):$(TAG) --platform $(PLATFORMS) \
	  $(PUSH) --file Dockerfile . \
	  --build-arg=VCS_REF=$(CI_COMMIT_SHA) \
	  --build-arg=BUILD_DATE=$(shell date +%Y-%m-%dT%H:%M:%SZ)

promote_image: $(HOME)/.docker/cli-plugins/docker-buildx
	# Log into dockerhub
	docker login -u $(USER_LOGIN) -p $(DOCKER_TOKEN)
	docker buildx build $(TAG_OPT) \
	  `[ -e hooks/add_tags ] && hooks/add_tags` \
	  --tag $(USER_LOGIN)/$(IMAGE):latest --platform $(PLATFORMS) \
	  --push --file Dockerfile . \
	  --build-arg=VCS_REF=$(CI_COMMIT_SHA) \
	  --build-arg=BUILD_DATE=$(shell date +%Y-%m-%dT%H:%M:%SZ)
	-if [ -x hooks/post_build ]; then sh hooks/post_build; fi

	# TODO - this only pushes amd64 manifest; as of May 2020 it seems
	#  that only "docker buildx create --push" handles multi-platform
	#  this slows down pipeline big-time
	# docker pull $(REGISTRY)/$(IMAGE):$(TAG)
	# docker tag $(REGISTRY)/$(IMAGE):$(TAG) $(REGISTRY)/$(IMAGE):latest
	# docker push $(REGISTRY)/$(IMAGE):latest
	# docker tag $(REGISTRY)/$(IMAGE):$(TAG) $(USER_LOGIN)/$(IMAGE):$(TAG)
	# docker tag $(REGISTRY)/$(IMAGE):$(TAG) $(USER_LOGIN)/$(IMAGE):latest
	# docker push $(USER_LOGIN)/$(IMAGE):$(TAG)
	# docker push $(USER_LOGIN)/$(IMAGE):latest
	# TODO update dockerhub README if/when that is supported,
	# see https://github.com/docker/hub-feedback/issues/1927

flake8: test_requirements
	@echo "Running flake8 code analysis"
	(. $(VDIR)/bin/activate ; flake8 --exclude=python_env .)

python_env: $(VDIR)/bin/python

test_requirements: python_env
	@echo "Installing test requirements"
	(if [ -f requirements/test.txt ]; then \
	  . $(VDIR)/bin/activate && \
	  pip install -r requirements/test.txt -r requirements/common.txt; \
	 fi)

$(VDIR)/bin/python:
	@echo "Creating virtual environment"
	virtualenv --system-site-packages $(VENV)

$(HOME)/.docker/cli-plugins/docker-buildx:
	mkdir -p $(HOME)/.docker/cli-plugins/
	wget -O $(HOME)/.docker/cli-plugins/docker-buildx $(BUILDX)
	chmod +x $(HOME)/.docker/cli-plugins/docker-buildx
	docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
	docker buildx create --name multibuild
	docker buildx use multibuild

clean:
	@echo "Cleaning out generated files"
	@rm -rf ./app/{.coverage,htmlcov,coverage.xml}
	@find . -name \*.pyc -exec rm {} \;
	@find . -name \*.log -exec rm {} \;
	@find . -name \*~ -exec rm {} \;
	@find . -name results.xml -exec rm {} \;
	@find . -name __pycache__ -exec rm -fr {} \;
